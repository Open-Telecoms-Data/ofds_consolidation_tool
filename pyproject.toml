[project]
name = "ofds_consolidation_tool"
version = "0.1.0"
requires-python = ">=3.8"

authors = [
    { name = "ODSC", email = "code@opendataservices.coop" }
]
description = "A tool to consolidate multiple fibre network datasets formatted using the Open Fibre Data Standard"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["open", "fibre", "data", "standard", "ofds", "consolidation", "tool", "gis", "qgis"]

# See: https://pypi.org/classifiers/
classifiers = [
    # Development Status
    "Development Status :: 3 - Alpha",
    # Environment
    "Environment :: Plugins",
    # Indicate who your project is intended for
    "Intended Audience :: Telecommunications Industry",
    "Topic :: Desktop Environment",
    "Topic :: Scientific/Engineering :: GIS",
    # License
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    # Specify the Python versions you support here.
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
Repository = "https://github.com/Open-Telecoms-Data/ofds_consolidation_tool"

[tool.pytest.ini_options]
addopts = "-v --tb=short --cov=."
testpaths = [
    "tests"
]

[tool.black]
line-length = 88
force-exclude = "gui(_style)?.py" # gui.py is generated by pyuic5, so don't format it

[tool.isort]
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#isort
profile = "black"
extent_skip_glob = [".cache/*", "gui.py"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
exclude = [
    "gui.py",
    "gui_style.py",
    "_lib/jellyfish/_jellyfish.py",
]

[tool.semantic_release]
assets = []
build_command = "/bin/bash ./scripts/build-package.sh"
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = '(main|master|rg/release)'
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

